require("it_moves/gm_phase_descriptions")
-- provides gm_phase_descriptions, a table.

function onLoad()
  phase_descriptions = gm_phase_descriptions
  min_players = Global.getVar('MIN_PLAYERS')
end

function onUpdate()
  updateSelf()
end

function updateSelf()
  number_of_players = #getSeatedPlayers()
  if number_of_players < min_players then
    return update_info(phase_descriptions, "Pre_Setup", number_of_players, min_players)
  end

  decksize_for_initial_deal = get_initial_deal(number_of_players)
  total_difficulty_for_table = get_total_difficulty_for_table(number_of_players)

  return update_info(phase_descriptions,"Setup", decksize_for_initial_deal, total_difficulty_for_table)
end

function get_initial_deal(n)
  -- consumes a number of players and produces the proper size of the
  -- deck for the initial deal, excluding the assimilation card.
  return (4 * n) - 1
end

function get_total_difficulty_for_table(n)
  -- consumes a number of palyers and produces the minimum difficulty
  -- that should be on the table at any one time
  return n * 2
end

function update_info(phase_descriptions, phase_name, ...)
  -- consumes the name of the current phase and  a table
  -- of phase-descriptions, indexed by phase name, and
  -- an arbitrary number of values corresponding to the
  -- number of variables in the phase-description, if any,
  -- and produces a reference to myself. As a side-effect, updates
  -- the info on my face to match the phase.
  phase_description = phase_descriptions[phase_name]
  title, fstring = phase_description["title"], phase_description["summary"]
  local args = {...}
  summary = string.format(fstring, unpack(args))
  self.setName(title)
  self.setDescription(summary)
  return self
end
