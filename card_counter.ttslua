function onCollisionEnter(collision_info)
    -- stolen from the button-visualizer.
    -- consumes a collision-event and produces the guid of the colliding object.
    -- collision_info table:
    --   collision_object    Object
    --   contact_points      Table     {Vector, ...}
    --   relative_velocity   Vector
    if Global.call("should_ignore_collision_p", collision_info) then return end
    local obj_GUID = collision_info.collision_object.getGUID()
    local obj = getObjectFromGUID(obj_GUID)
    local count_table = object_count_cards(obj)
    self.setDescription(format_count_table(count_table))
end

function format_count_table(table)
    -- consumes a table with the following keys:
    -- table.count : number of successes and
    -- table.jokers : number of jokers
    -- and produces a pretty string describing the situation.
    if table.count == -1 then
        return "That object can't be counted for successes"
    else
        fstring = [[
    Number of successes: %i
    Number of assimilation cards: %i
    ]]
        return string.format(fstring, table.count, table.jokers)
    end
end

function object_count_cards(obj)
    -- consumes whatever object and produces a table describing
    -- 1) the number of successes it contains and
    -- 2) whether it contains any jokers
    -- if the object can't be counted, the number of successes is
    -- set to -1
    local item_class = Global.call("get_quasi_type", obj)
    if item_class == "Card" or item_class == "Deck" then
        c = Global.call("count_successes", obj)
        j = Global.call("count_jokers", obj)
    else
        c, j = -1, -1
    end
    local result = {count = c, jokers = j}
    return result
end
