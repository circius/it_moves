require("it_moves/random_tasks") -- provides "tasks"

function onload(save_state)
    unused_tasks = tasks
    task_end_of_deck = {
        name = "Deck exhausted",
        difficulty = 99,
        state_0 = [[If you still need tasks,
you'll have to write them up yourself.]]
    }
    spawn_offset_from_button = vector(-6.5, 8, 4)
    self.createButton(
        {
            click_function = "pressed",
            label = "task factory",
            function_owner = self,
            position = {0, 1, 1},
            rotation = {0, 180, 0},
            width = 3300,
            height = 600,
            font_size = 500
        }
    )
end

function pressed(clicked_object, player)
    my_position = self.getPosition()
    spawning_zone = my_position + spawn_offset_from_button
    unused_tasks = tasks_spawn_taskcard(unused_tasks, spawning_zone)
end

function tasks_spawn_taskcard(tasks_table, pos_vector)
    -- consumes a table of task-specifications and pops
    -- a task from it. produces the table without the
    -- task, and as a side-effect spawns a notecard
    -- representing the task in the gameworld.
    if #tasks_table == 0 then
        task_to_spawn = task_end_of_deck
    else
        task_to_spawn = table.remove(unused_tasks, math.random( #unused_tasks ))
    end
    printToAll("spawning task " .. task_to_spawn["name"])
    task_spawn_task_card(task_to_spawn, pos_vector)
    return unused_tasks
end

function task_spawn_task_card(task, pos_vector)
    -- consumes a task-specification and a world-location, and spawns
    -- a Notecard representing the task at the world-location. returns
    -- nothing.
    local callback = function(obj)
        task_card_write_info(obj, task)
    end
    spawnObject(
        {
            type = "Notecard",
            position = pos_vector,
            sound = true,
						scale = Vector(1.5,1.5,1.5),
            callback_function = callback
        }
    )
    return
end

function task_card_write_info(notecard, task)
    -- consumes a notecard object-reference and a task-spec and writes
    -- the task-spec onto the notecard. return nothing.
    notecard.setName(task["name"])
    notecard.setGMNotes(tostring(task["difficulty"]))
    notecard.setDescription(tostring(task["state_0"]))
    return
end
