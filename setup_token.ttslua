function onLoad()
    tasks_remaining_indicator_GUID = "a8880c"
    tasks_remaining_indicator = getObjectFromGUID(tasks_remaining_indicator_GUID)

    fifteen_tasks_until_rescue_zone_GUID = "2bd444"
    fifteen_tasks_until_rescue_zone = getObjectFromGUID(fifteen_tasks_until_rescue_zone_GUID)
    fifteen_tasks_until_rescue_zone_position = fifteen_tasks_until_rescue_zone.getPosition()

    assimilation_infinite_bag_GUID = "c648cf"
    success_infinite_bag_GUID = "cc80cd"
    failure_infinite_bag_GUID = "d2e74f"

    deck_area_scripting_zone_GUID = "d6a3af"
    deck_area_scripting_zone = getObjectFromGUID(deck_area_scripting_zone_GUID)
    deck_area_position = deck_area_scripting_zone.getPosition()

    assimilation_infinite_bag = getObjectFromGUID(assimilation_infinite_bag_GUID)
    success_infinite_bag = getObjectFromGUID(success_infinite_bag_GUID)
    failure_infinite_bag = getObjectFromGUID(failure_infinite_bag_GUID)

    min_players, max_players = Global.getVar("MIN_PLAYERS"), Global.getVar("MAX_PLAYERS")

    self.createInput({
        input_function = "handle_input",
        function_owner = self,
        label = "# of players",
        position = Vector(0,1,3),
        rotation = {0,180,0},
        font_size = 400,
        width = 2100,
        height = 500,
        alignment=3,
        tooltip = "I can handle inputs between 6 and 9.",
        validation = 2,
    })

    self.createButton(
        {
            click_function = "pressed",
            label = "do setup",
            function_owner = self,
            position = {0, 1, 1},
            rotation = {0, 180, 0},
            width = 2000,
            height = 600,
            font_size = 500
        }
    )
end

function handle_input(obj, color, input, stillEditing)
    return true
end

function pressed()
    local input_field = self.getInputs()
    local input_value = input_field[1].value
    if input_value == nil then return end
    local input_value_num = tonumber(input_value)
    if validate_input(input_value_num) then
        do_setup(7)
    else
        local fstring = "Players should be between %i and %i, inclusive."
        printToColor(string.format(fstring, min_players, max_players), "Black")
    end
end

function do_setup(n)
    -- consumes a number between 6 and 9, and sets up the board for n players.
    -- As a side-effect, destroys self.
    spawn_initial_deck_for_n_players(n)
    destroyObject(success_infinite_bag)
    destroyObject(failure_infinite_bag)

    local mission_target = Global.call("missions_to_complete", n)
    Global.setVar("MISSIONS_TO_COMPLETE", mission_target)
    setup_task_indicator_for_n_players(n)

    destroyObject(self)
    return true
end


function setup_task_indicator_for_n_players(n)
    -- consumes a number of players n and sets up the task indicator 
    -- in the appropriate place 
    -- note that for now we always give the players 15 tasks to complete.
    tasks_remaining_indicator.setPositionSmooth(fifteen_tasks_until_rescue_zone_position)
    return
end

function spawn_initial_deck_for_n_players(n)
    -- consumes a number of players N and produces an object-reference to the deck
    -- which, as a side-effect, it will spawn at the position of the deck_area.

    local total_cards = Global.getVar('TOTAL_CARDS_IN_DECK') -- this could be made to depend on n
    local ratio_of_successes = Global.getVar('RATIO_OF_SUCCESS_TO_FAILURE')
    local number_of_successes = math.floor(total_cards * ratio_of_successes)
    local number_of_failures = total_cards - number_of_successes
    local successes = spawn_n_cards_from_bag(number_of_successes, success_infinite_bag)
    local failures = spawn_n_cards_from_bag(number_of_failures, failure_infinite_bag)
    return 
end


function spawn_n_cards_from_bag(n, bag)
    -- consumes an integer n and a bag of cards and spawns that n cards
    -- from the bag into the deck area, giving it, first,  produces nothing.
    for i = 1, n do
        bag.takeObject({
            position = deck_area_position + Vector(0,2,0)
        })
    end
    return
end

function validate_input(n)
    -- consumes an int and checks that it's a valid number of players.
    return min_players <= n and n <= max_players
end
